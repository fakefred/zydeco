// use std::str::FromStr;
use crate::syntax::{TValue, TCompute, Value, Compute};

grammar;

pub Computation: Box<Compute<()>> = <CompBox>;

CompBox: Box<Compute<()>> = Boxed<Comp>;

Comp: Compute<()> = {
    "let" <x:Id> "=" <def:ValBox> ";" <body:CompBox> => Compute::Let {
        binding: (x, def), body, ann: ()
    },
    "do" <x:Id> "<-" <def:CompBox> ";" <body:CompBox> => Compute::Do {
        binding: (x, def), body, ann: ()
    },
    "!" <v:ValBox> => Compute::Force(v, ()),
    "ret" <v:ValBox> => Compute::Return(v, ()),
    "fn" "(" <a:Args> ")" "{" <e:CompBox> "}" =>
        *a.into_iter().fold(e, |body, arg| Box::new(Compute::Lam{
            arg, body, ann: ()
        })),
    <v:ValBox> "'" <e:CompBox> => Compute::App(e, v, ()),
    "if" <cond:ValBox> "{" <thn:CompBox> "}" "else" "{" <els:CompBox> "}" => Compute::If {
        cond, thn, els, ann: ()
    },
}

Args: Vec<(String, Box<TValue<()>>)> = {
    <a:Arg> "," <mut b:Args> => {
        b.push(a);
        b
    },
    <a:Arg> => vec![a],
}

Arg: (String, Box<TValue<()>>) = {
    <x:Id> ":" <t:TValBox> => (x, t),
}

ValBox: Box<Value<()>> = Boxed<Val>;

Val: Value<()> = {
    <x:Id> => Value::Var(x, ()),
    "{" <e:CompBox> "}" => Value::Thunk(e, ()),
    <b:Bool> => Value::Bool(b, ()),
}

TCompBox: Box<TCompute<()>> = Boxed<TComp>;

TComp: TCompute<()> = {
    "Ret" "(" <t:TValBox> ")" => TCompute::Ret(t, ()),
    <tv:TValBox> "->" <tc:TCompBox> => TCompute::Lam(tv, tc, ()),
}

TValBox: Box<TValue<()>> = Boxed<TVal>;

TVal: TValue<()> = {
    "Comp" "(" <t:TCompBox> ")" => TValue::Comp(t, ()),
    "Bool" => TValue::Bool(()),
}

Boxed<T> : Box<T> = {
    T => Box::new(<>)
}

Id: String = <s:r"[a-zA-Z][a-zA-Z0-9_-]*"> => String::from(s);

Bool: bool = {
    "true" => true,
    "false" => false,
}
