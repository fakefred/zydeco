fn (x: Bool, y: Comp(Bool -> Ret(Bool))) { x ' !y }
@@@ fn & app
{ fn (x: Bool) { ret x } } ' true ' fn (x: Bool, y: Comp(Bool -> Ret(Bool))) { x ' !y }
@@@ fn & app, x2
let x = true,
    y = {ret false};
let f = { fn (b: Bool) { ret b } };
do  rx <- x ' !f,
    ry <- do y <- !y; y ' !f;
if x { ret rx } else { ret ry }
@@@ multiple bindings everywhere
let not = { fn (x: Bool) { if x { ret false } else { ret true } } },
    and = { fn (x: Bool, y: Bool) { if x { ret y } else { ret false } } },
    or = { fn (x: Bool, y: Bool) { if x { ret true } else { ret y } } };
do  a <- true ' false ' !and,
    b <- true ' false ' !or,
    c <- a ' !not;
b ' c ' !and
@@@ boolean operations