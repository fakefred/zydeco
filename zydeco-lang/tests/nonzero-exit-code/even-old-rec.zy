data Nat where | Z() | S(Nat)
let rec odd: Nat -> Ret(Bool) = (
  let even = {
    rec (even: Comp(Nat -> Ret(Bool))) -> (
      fn (x: Nat) -> (
        match x
        | Z -> ret true
        | S(x) -> !odd x
      )
    )
  };
  fn (x: Nat) -> (
    match x
    | Z -> ret false
    | S(x) -> !even x
  )
);
do b <- !odd S(S(S(Z())));
if b: ! exit 0 else: ! exit 1

