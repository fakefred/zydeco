codata Y where
  .y(U(Y)): Int -> F(Int)

# \f. (\x. f (x x)) (\x. f (x x))
# The famous Y combinator in call-by-name sense actually works
# under call-by-push-value - thanks to thunks, we are able to
# preserve the intention of lazy evaluation in `x` above.

let y = {
  fn (f: U(U(Int -> F(Int)) -> Int -> F(Int))) ->
    ret {
      (comatch | .y(x) -> ! f { ! x .y(x) })
      .y({ comatch | .y(x) -> ! f { ! x .y(x) } })
    }
};

# `int_eq` implemented by `str_eq`;
# should be replaced after `int_eq` is builtin
let int_eq = {
  fn (x: Int, y: Int) ->
    do x <- ! int_to_str x;
    do y <- ! int_to_str y;
    ! str_eq x y
};

# good old factorial
let fact = {
  fn (f: U(Int -> F(Int))) ->
    fn (n: Int) ->
      do is_zero <- ! int_eq n 0;
      match is_zero
      | True() -> ret 1
      | False() -> (
        do rest <-
          do n-1 <- !sub n 1;
          ! f n-1;
        ! mul n rest
      )
};

do fact <- ! y fact;

# tests
let main = { fn (input: Int, expected: Int, t: Thunk(OS)) ->
  do x <- ! fact input;
  do correct <- ! int_eq x expected;
  match correct
  | True() -> ! t
  | False() -> (
    do input <- ! int_to_str input;
    do expected <- ! int_to_str expected;
    do got <- ! int_to_str x;
    do msg <- ! str_append "f " input;
    do msg <- ! str_append msg " = ";
    do msg <- ! str_append msg expected;
    do msg <- ! str_append msg ", got ";
    do msg <- ! str_append msg got;
    ! write_line msg { ! exit 1 }
  )
};

! main 5 120 {
! main 10 3628800 {
! exit 0 }}
