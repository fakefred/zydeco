data Nat where | Z() | S(Nat)
codata OddEven where
  .even() : Nat -> Ret(Bool)
  .odd()  : Nat -> Ret(Bool)

let rec eo : OddEven = (
  comatch
    | .even() -> (fn (n : Nat) -> match n
      | Z()  -> ret True()
      | S(n) -> ((! eo .odd()) n))
    | .odd()  -> (fn(n : Nat) -> match n
      | Z()  -> ret False()
      | S(n) -> (! eo.even()) n)
);
do b <- (! eo .even()) S(S(S(S(Z()))));
match b
| True() -> ! exit 0
| False() -> ! exit 1


