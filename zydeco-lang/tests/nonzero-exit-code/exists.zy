data Seal (X : VType) (A : VType) where
| Seal(Thunk(A -> Ret X), Thunk(X -> Ret A))
end

def id : Thunk(forall (A : VType) . A -> Ret A) = {
    fn (A : VType) -> fn x -> ret x
} end

def nat : exists (X : VType) . Seal X Int = pack(
  Int, Seal(
    { ! id @(Int) },
    { ! id @(Int) },
  )
) end

match nat | pack(Nat, seal) ->
  match seal
  | Seal(of, to) ->
    do n <- ! of 0;
    do i <- ! to n;
    ! exit i
  end
end