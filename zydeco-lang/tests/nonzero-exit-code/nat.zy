data Nat where | Z() | S(Nat) end
let zero: Nat = Z();
let suc = {
  fn (x: Nat) -> ret (S(x)::Nat)
};
let ifz = {
  fn (z: Bool, pred: Comp(Nat -> Ret(Bool)), x: Nat) -> (
    match x
    | Z() -> ret z
    | S(x) -> !pred x
    end
  )
};
do one <- !suc zero,
   two <- !suc one;
let ifz = {
  fn (x: Nat) -> (
    !ifz false { fn (_: Nat) -> ret true } x
  )
};
do two' <- !ifz two;
do one' <- !ifz one;
do zero' <- !ifz zero;
do b <- (
  match two'
  | True() -> (
    match one'
    | True() -> (
      match zero'
      | False() -> ret true
      | True() -> ret false
      end
    )
    | False() -> ret false
    end
  )
  | False() -> ret false
  end
);
match b
| True() -> ! exit 0
| False() -> ! exit 1
end
