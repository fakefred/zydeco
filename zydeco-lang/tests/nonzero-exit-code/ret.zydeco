alias Return (A : VType) = forall (R : CType) . Thunk(A -> R) -> R end

def f : Thunk(forall (A : VType) . Thunk(Return A) -> Ret A) = {
  fn A -> fn rr -> (
    ! rr @(Ret A) { fn a -> ret a }
  )
} end

def g : Thunk(forall (A : VType) . Thunk(Ret A) -> Return A) = {
  fn A -> fn r -> (
    fn R -> fn ar -> (
      do a <- ! r;
      ! ar a
    )
  )
} end

def id : Thunk(forall (A : VType) . Thunk(Ret A) -> Ret A) = {
  fn A -> fn r -> (
    ! f @(A) { ! g @(A) r }
  )
} end

def id' : Thunk(forall (A : VType) . Thunk(Return A) -> Return A) = {
  fn A -> fn rr -> (
    ! g @(A) { ! f @(A) rr }
  )
} end

let n = 0 in
do n <- ! id @(Int) { ret n };
! id' @(Int) { fn R -> fn ar -> ! ar n } @(OS) exit
