data List (A : VType) where
  | Nil()
  | Cons(A, List A)
end

let rec foldl : List String -> Thunk(String -> Int -> Ret(Int)) -> Int -> Ret(Int) =
  fn l step s ->
    match l
    | Nil() -> ret s
    | Cons(x, xs) -> (
      do s' <- ! step x s;
      ! foldl xs step s'
    )
    end
in

do l <- ! foldl (Cons("abc", Cons("", Cons("y", Nil()))))
                { fn (s : String) (i : Int) ->
                  do i' <- ! str_length s;
                  ! add i i'
                }
                0;
do s <- ! int_to_str l;
! write_line s { ! exit 0 }
