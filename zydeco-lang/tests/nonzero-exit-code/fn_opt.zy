codata FnInt where
  | .int(Int): F(Int)
end

codata FnOptInt where
  | .one(Int): F(Int)
  | .zero(): F(Int)
end

let fn_int : Thunk(FnInt) = {
  comatch
  | .int(i) -> ret i
  end
};

let fn_opt_int : Thunk(FnOptInt) = {
  comatch
  | .one(i) -> ! fn_int .int(i)
  | .zero() -> ! fn_int .int(0)
  end
};

do x <- ! fn_opt_int .zero();
! exit x