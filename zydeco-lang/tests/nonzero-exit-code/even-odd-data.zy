data Nat where | Z() | S(Nat)
data OddEven where | OddEven(Comp(Nat -> Ret(Bool)), Comp(Nat -> Ret(Bool)))
let rec fp: Ret(OddEven) = (
  ret OddEven({
    do fp <- !fp;
    match fp | OddEven(odd, even) -> (fn (x: Nat) -> (
      match x
      | Z -> ret False()
      | S(x) -> !even x
    ))
  }, {
    do fp <- !fp;
    match fp | OddEven(odd, even) -> (fn (x: Nat) -> (
      match x
      | Z -> ret True()
      | S(x) -> !odd x
    ))
  })
);
do odd <- (
  do fp <- !fp;
  match fp | OddEven(odd, even) -> ret { !odd }
);
do b <- !odd S(S(S(Z())));
match b
| True() -> ! exit 0
| False() -> ! exit 1
