data LList where
  | Nil()
  | Cons(Int, U(F(LList)))

let rec iota : Int -> F(LList) = (
  fn (i: Int) ->
    do i+1 <- ! add i 1;
    ret Cons(i, { ! iota i+1 })
);

let rec foldr : U(F(LList)) -> U(Int -> U(OS) -> OS) -> U(OS) -> OS = (
  fn (ll: U(F(LList)), f: U(Int -> U(OS) -> OS), b: U(OS)) ->
    do llv <- ! ll;
    match llv
    | Nil() -> ! b
    | Cons(a, ll) -> ! f a { ! foldr ll f b }
);

let loopy = {
  ! foldr
  { ! iota 0 }
  { fn (x: Int, b: U(OS)) ->
    do next? <- ! int_lt x 10;
    ! write_int_line x b
  }
  { ! panic "unreachable" }
};

! loopy