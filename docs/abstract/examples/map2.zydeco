let map2 = {
  rec (map: U(U(Int -> F(Int))
    -> F(U(ListInt -> F(ListInt))))) ->
    fn (f: U(Int -> F(Int))) ->
      ret {
        fn (l: ListInt) ->
          match l
            | Nil() -> ret Nil()
            | Cons(x, xs) ->
              ( do x <- ! f x;
                do map' <- ! map f;
                do xs' <- ! map' xs;
                ret Cons(x, xs') )
      }
};
do map2' <- ! map2 f;
! map2' l