data Sum where
  | Done()
  | More (Int, Sum)

let sum = {
  rec (sum: U(Sum -> F(Int))) ->
    fn (xs: Sum) ->
      match xs
      | Done() -> ret 0
      | More (x, xs) ->
        ( match xs
          | Done() -> ret x
          | More(y, xs) ->
            ( do z <- x + y;
              ! sum More(z, xs) ) )
};

! sum (More (1, More (2, Done())))